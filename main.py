import random, asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, BotCommand, BotCommandScopeDefault
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, Defaults, ConversationHandler
from telegram.constants import ParseMode, ChatAction
from telegram.ext.filters import BaseFilter

EMOJIS = ['üòÄ', 'üòÇ', 'ü§£', 'üòç', 'ü•∞', 'üòé', 'ü§©', 'ü•≥', 'ü§Ø', 'üëª', 
          'üí©', 'ü§ñ', 'üëΩ', 'üê∂', 'üê±', 'ü¶Ñ', 'üêâ', 'üçï', 'üçî', 'üéÆ']

COLOR = ['üî¥', 'üîµ', 'üü¢', 'üü°',
         'üü†', 'üü£', '‚ö´', '‚ö™']

NAME, AGE, BIO = range(3)

user_data = {}

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_name = user.first_name

    welcome_text = f"–ü—Ä–∏–≤–µ—Ç {user_name},\n"\
                    "\n"\
                    "–Ø —É–º–µ—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏\n"\
                    "\n"\
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ."
    try:
        with open ('cat.jpg', 'rb') as photo:
            await show_typing(update, context)
            await update.message.reply_photo(photo, caption=welcome_text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard())

    except FileNotFoundError:
        await show_typing(update, context)
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard())

def get_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("Info", callback_data='info'),
            InlineKeyboardButton("Help", callback_data='help')
        ],

        [
            InlineKeyboardButton("Color", callback_data='color'),
            InlineKeyboardButton("Emoji", callback_data='emoji')
        ], 

        [
            InlineKeyboardButton("Clear", callback_data='clear'),
            InlineKeyboardButton("–§–æ—Ç–æ", callback_data='photo')
        ],       
    ]
    return InlineKeyboardMarkup(keyboard)

def get_dice_keyboard():
    dice_keyboard = [
        [
            InlineKeyboardButton("–ü–µ—Ä–µ–∫—Ä—É—Ç–∏—Ç—å", callback_data='reroll_dice')
        ]
    ]
    return InlineKeyboardMarkup(dice_keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await welcome(update, context)
    # reply_markup = InlineKeyboardMarkup(keyboard)

    # custom_keyboard = [
    #     [
    #         KeyboardButton("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"),
    #         KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    #     ],

    #     [
    #         KeyboardButton("–§–æ—Ç–æ"),
    #         KeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏")
    #     ]
    # ]
    # custom_reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)

    # await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç", reply_markup=reply_markup)
    # await update.message.reply_text("–ö–Ω–æ–ø–∫–∏", reply_markup=custom_reply_markup)

async def show_typing(update: Update, context: ContextTypes.DEFAULT_TYPE, duration: float=1.0):
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(duration) 

async def setup(app: Application):
    commands = [
        BotCommand("start", "–ù–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É!"),
        BotCommand("register", "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"),
        BotCommand("info", "–ò–Ω—Ñ–æ—Ç—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand("help", "–í—Å–µ –∫–æ–º–º–∞–Ω–¥—ã"),
        BotCommand("photo", "–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ"),
        BotCommand("color", "–†–∞–Ω–¥–æ–º–Ω—ã–π —Ü–≤–µ—Ç"),
        BotCommand("emoji", "–†–∞–Ω–¥–æ–º–Ω—ã–µ 3 —ç–º–æ–¥–∑–∏"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"),
        BotCommand("dice", "–ö—Ä—É—Ç–∏—Ç—å –∫–æ—Å—Ç–∏")
    ]
    await app.bot.set_my_commands(commands, scope=BotCommandScopeDefault())

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/register - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
/help - –ü–æ–º–æ—â—å
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/color - –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
/emoji - –°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
/clear - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç """
    await show_typing(update, context)
    await update.message.reply_text(help_text)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—â–∏"
    await show_typing(update, context)
    await update.message.reply_text(info_text)

async def color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    color = ' '.join(random.choices(COLOR, k=1))
    await show_typing(update, context)
    await update.message.reply_text(text=f"–°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç: {color}")

async def emoji(update: Update, context: ContextTypes.DEFAULT_TYPE):
    emojis = ' '.join(random.choices(EMOJIS, k=3))
    await show_typing(update, context)
    await update.message.reply_text(text=f"–°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏: {emojis}")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    last_message_id = update.effective_message.message_id

    try:
        for i in range(5):
            try:
                await context.bot.delete_message(chat_id, last_message_id - i)
            except Exception:
                continue
            #await asyncio.sleep(0.1)

        await show_typing(update, context)
        await context.bot.send_message(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω! üßπ")
    except Exception as e:
        await show_typing(update, context)
        await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await show_typing(update, context)
    await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

async def send_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–ö–æ—Ç –í–∞—Å–∏–ª–∏–π"
    try:
        with open('image.png', 'rb') as photo:
            await show_typing(update, context)
            await update.message.reply_photo(photo, text)
    
    except FileNotFoundError:
        await show_typing(update, context)
        await update.message.reply_text("–û—à–∏–±–∫–∞")

async def dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_typing(update, context)
    await context.bot.send_dice(
        chat_id=update.effective_chat.id,
        reply_markup=get_dice_keyboard()
    )

async def reroll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_dice(
        chat_id=update.effective_chat.id,
        reply_markup=get_dice_keyboard()
    )

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_typing(update, context)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancle_reg')]]))
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_data:
        user_data[user_id]={}
    print(user_data[user_id])

    user_data[user_id]["name"] = update.message.text

    await show_typing(update, context)
    await update.message.reply_text("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancle_reg')]]))
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    age = int(update.message.text)
    user_id = update.effective_user.id

    user_data[user_id]["age"] = age
    await show_typing(update, context)
    await update.message.reply_text("–†–∞—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='cancle_reg')]]))
    return BIO

async def get_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]["bio"] = update.message.text
    await show_typing(update, context)
    await update.message.reply_text(
        f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n'
        f'–ò–º—è: {user_data[user_id]["name"]}\n'
        f'–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]["age"]}\n'
        f'–ë–∏–æ: {user_data[user_id]["bio"]}'
    )
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–í—Å–µ –∫–æ–º–º–∞–Ω–¥—ã":
        await help(update, context)

    elif text == "–§–æ—Ç–æ":
        await send_photo(update, context)

    elif text == "–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏":
        await dice(update, context)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'info':
        await query.edit_message_text(text="–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—â–∏")

    elif query.data == 'help':
        await query.edit_message_text(text="""–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/color - –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
/emoji - –°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
/clear - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç """)

    elif query.data == 'color':
        await color(update, context)

    elif query.data == 'emoji':
        emojis = ' '.join(random.choices(EMOJIS, k=3))
        await query.edit_message_text(text=f"–°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏: {emojis}")

    elif query.data == 'photo':
        try:
            with open('image.png', 'rb') as photo:
                await query.message.reply_photo(photo)

        except FileNotFoundError:
            await query.message.reply_text()

    elif query.data == 'reroll_dice':
        await reroll_dice(update, context)
        
    elif query.data == 'clear':
        chat_id = update.effective_chat.id
        last_message_id = update.effective_message.message_id

        try:
            for i in range(20):
                try:
                    await context.bot.delete_message(chat_id, last_message_id - i)
                except Exception:
                    continue
                await asyncio.sleep(0.1)
            
            await context.bot.send_message(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω! üßπ")
        except Exception as e:
            await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        

def main():
    app = Application.builder().token('8129146567:AAGEHZ002jaeQ2tMUHkdKMpcVUoazb8kmfM').build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("color", color))
    app.add_handler(CommandHandler("emoji", emoji))
    app.add_handler(CommandHandler("clear", clear))
    app.add_handler(CommandHandler("date", date))
    app.add_handler(CommandHandler("photo", send_photo))
    app.add_handler(CommandHandler("dice", dice))
    app.add_handler(CallbackQueryHandler(button_callback))
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('register', start_registration)],
        states= {
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bio)]
        },
        fallbacks=[CallbackQueryHandler(dice, pattern='^cancle_reg$')]
    )
    app.add_handler(conv_handler)

    app.post_init = setup

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == '__main__':
    main()